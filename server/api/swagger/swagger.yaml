---
swagger: "2.0"
info:
  title: "Infogalactic"
  description: "Infogalactic news API"
  version: "1.0.0"
  contact:
    email: "activedecay@gmail.com"
#  termsOfService: "http://swagger.io/terms/"
  license:
    name: "MIT"

externalDocs:
  description: "Infogalatic news for the browser"
  url: "http://news.infogalactic.com"    

host: "localhost:8080"
basePath: "/"
schemes:
- "http"
securityDefinitions:
  news_auth:
    type: "oauth2"
    authorizationUrl: "http://news.infogalactic.com/oauth/dialog"
    flow: "implicit"
    scopes:
      write:news: "modify news"
      read:news: "read the news"
#  api_key: # todo broken when running `start(developer.js with mocks)
#    type: "apiKey"
#    name: "api_key"
#    in: "header"

tags:
- name: "news"
  description: "news item crud"
- name: "stage"
  description: "production phase staging crud"
- name: "user"
  description: "user crud"

paths:
  # todo broken when running `swagger project start/edit`
  # /swagger: 
  #   x-swagger-pipe: swagger_raw
  /news:
    get:
      tags:
      - "news"
      summary: "Read all the news items from the current history node"
      operationId: "readNews"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/News"
      security:
      - news_auth:
        - "read:news"
      x-swagger-router-controller: "News"
  /news/createWithArray:
    post:
      tags:
      - "news"
      summary: "Creates list of news items with given input array"
      operationId: "createWithArray"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of news item to create"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/News"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/News"
        400:
          description: "Bad request: this news item (by URL) already exists on the stage"
      security:
      - news_auth:
        - "write:news"
      x-swagger-router-controller: "News"
  /news/{newsId}:
    get:
      tags:
      - "news"
      summary: "Find news item by ID"
      description: "Returns a single news item"
      operationId: "readNewsById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "newsId"
        in: "path"
        description: "ID of news item to return"
        required: true
        type: "string"
        format: "uuid4"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/News"
        404:
          description: "News item not found"
      security:
      - news_auth:
        - "read:news"
#      - api_key: []
      x-swagger-router-controller: "News"
    post:
      tags:
      - "news"
      summary: "Create a news item and add it to the stage"
      operationId: "createNews"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "newsId"
        in: "path"
        description: "News item ID to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "News item to add to the stage"
        required: true
        schema:
          $ref: "#/definitions/News"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/News"
        400:
          description: "Bad request: this news item (by URL) already exists on the stage"
      security:
      - news_auth:
        - "write:news"
      x-swagger-router-controller: "News"
    put:
      tags:
      - "news"
      summary: "Update an existing news item"
      operationId: "updateNews"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "newsId"
        in: "path"
        description: "News item ID to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "News item to be updated in the stage"
        required: true
        schema:
          $ref: "#/definitions/News"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/News"
        404:
          description: "News item (by ID) was not found"
      security:
      - news_auth:
        - "write:news"
      x-swagger-router-controller: "News"
    delete:
      tags:
      - "news"
      summary: "Deletes a news item"
      operationId: "deleteNews"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
#      - name: "api_key"
#        in: "header"
#        required: false
#        type: "string"
      - name: "newsId"
        in: "path"
        description: "News item id to delete"
        required: true
        type: "string"
        format: "uuid4"
      responses:
        404:
          description: "News item not found"
      security:
      - news_auth:
        - "write:news"
      x-swagger-router-controller: "News"
  /news/{newsId}/uploadImage:
    post:
      tags:
      - "news"
      summary: "Uploads an image for a news item"
      operationId: "uploadNewsImage"
      consumes:
      - "multipart/form-data"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "newsId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "string"
        format: "uuid4"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data (dead code)"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "OK"
      security:
      - news_auth:
        - "write:news"
      x-swagger-router-controller: "News"
  /stage:
    get:
      tags:
      - "stage"
      summary: "Returns news items in the stage"
      description: "Production quality phase check before finalizing release; inspect staged changes before committing to history."
      operationId: "readStage"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/News"
      security:
      - news_auth:
        - "read:news"
#      - api_key: []
      x-swagger-router-controller: "Stage"
  /stage/save:
    post:
      tags:
      - "stage"
      summary: "Place a new node in the history with the contents of the current stage"
      operationId: "pushHistoryNode"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "OK"
      security:
      - news_auth:
        - "write:news"
      x-swagger-router-controller: "Stage"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "User"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The login user name"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password, cleartext"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        403:
          description: "Invalid credentials"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      operationId: "getUserByName"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"

definitions:
  News:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
        format: "uuid4"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    #   category:
    #     $ref: "#/definitions/Category"
    #   name:
    #     type: "string"
    #     example: "doggie"
    #   photoUrls:
    #     type: "array"
    #     xml:
    #       name: "photoUrl"
    #       wrapped: true
    #     items:
    #       type: "string"
    #   tags:
    #     type: "array"
    #     xml:
    #       name: "tag"
    #       wrapped: true
    #     items:
    #       $ref: "#/definitions/Tag"
    #   status:
    #     type: "string"
    #     description: "pet status in the store"
    #     enum:
    #     - "available"
    #     - "pending"
    #     - "sold"
    # xml:
    #   name: "Pet"
  # Order:
  #   type: "object"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     petId:
  #       type: "integer"
  #       format: "int64"
  #     quantity:
  #       type: "integer"
  #       format: "int32"
  #     shipDate:
  #       type: "string"
  #       format: "date-time"
  #     status:
  #       type: "string"
  #       description: "Order Status"
  #       enum:
  #       - "placed"
  #       - "approved"
  #       - "delivered"
  #     complete:
  #       type: "boolean"
  #       default: false
  #   xml:
  #     name: "Order"
  # Category:
  #   type: "object"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     name:
  #       type: "string"
  #   xml:
  #     name: "Category"
  # Tag:
  #   type: "object"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     name:
  #       type: "string"
  #   xml:
  #     name: "Tag"
  # ApiResponse:
  #   type: "object"
  #   properties:
  #     code:
  #       type: "integer"
  #       format: "int32"
  #     type:
  #       type: "string"
  #     message:
  #       type: "string"
